@startuml
skinparam linetype polyline

card Framework/Middleware as fw {
  component "vert.x" as fw.vertx {
  }

  component "app-base" as fw.appBase {
  }

  component "DB" as fw.db {
  }

  fw.db -[hidden]- fw.appBase
  fw.vertx -left-|> fw.appBase
}

card "ext" {
   card "data-type" as pub {
     component "PublicModels" as pub.models {
     }
   }
   note left of pub.models : [一般的なデータ形式]\nDomainを横断して\nDomain/Service層の\nModelに参照されうる
   component "Domain.Models" as domain.Models {
   }
   component "Service.Models" as service.Models {
   }
   pub.models *-up- domain.Models
   pub.models *-up- service.Models
}

card "auth" as auth {
  component "auth.Domain" as auth.Domain {
    component "auth.Models" as auth.Domain.Models{
    }
    component "auth.Repository" as auth.Domain.Repository {
    }
    auth.Domain.Models *-u- auth.Domain.Repository
  }

  component "auth.UseCase" as auth.UseCase {
  }

  auth.Domain.Repository *-- auth.UseCase
}

card "state" as state {
  component "state.Domain" as state.Domain {
    component "state.Models" as state.Domain.Models{
    }
    component "state.Repository" as state.Domain.Repository {
    }
    state.Domain.Models *-u- state.Domain.Repository
  }

  component "state.UseCase" as state.UseCase {
  }

  state.Domain.Repository *-- state.UseCase
}

card "Infra" as Infra {
  class "Impl:auth.UseCase" as Infra.authUseCase {
    +repositoryImpl: auth.Repository...
  }

  class "Impl:state.UseCase" as Infra.stateUseCase {
    +repositoryImpl: state.Repository...
  }
  auth.UseCase <|-- Infra.authUseCase
  state.UseCase <|-- Infra.stateUseCase
}
fw.db <|-left- Infra

card "Service" as Service {
  class "auth.Service" as Service.auth {
    +authUseCase: auth.UseCase...
    +stateUseCase: state.UseCase...
  }
  component "auth.Models" as Service.authModels {
  }
  note right of Service.authModels:[サービス入出力モデル]\n入出力に対応する\nデータモデル
}
Infra.authUseCase *-- Service.auth
Infra.stateUseCase *-- Service.auth
Service.auth -left-|> fw.appBase
Service.auth -left-* Service.authModels
@enduml